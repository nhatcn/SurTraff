from fastapi import APIRouter, HTTPException, status
from pydantic import BaseModel, Field
from typing import List, Optional
from services.chatbot.process_question import process_question
from services.chatbot.surtraff_utils import detect_topic, save_feedback
import logging
from datetime import datetime

# C·∫•u h√¨nh logging
logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

router = APIRouter()

class HistoryTurn(BaseModel):
    sentence: str = Field(..., min_length=1, max_length=500, description="C√¢u h·ªèi ho·∫∑c c√¢u n√≥i trong l·ªãch s·ª≠ h·ªôi tho·∫°i")
    response: str = Field(..., min_length=1, max_length=1000, description="C√¢u tr·∫£ l·ªùi t·ª´ chatbot")
    type: str = Field(..., description="Lo·∫°i c√¢u h·ªèi (traffic_law, plate_violation, traffic_external, method_violation, social, general)")
    lang: str = Field(..., description="Ng√¥n ng·ªØ c·ªßa c√¢u h·ªèi v√† tr·∫£ l·ªùi (vi ho·∫∑c en)")

class QueryRequest(BaseModel):
    sentence: str = Field(..., min_length=1, max_length=500, description="C√¢u h·ªèi ho·∫∑c c√¢u n√≥i t·ª´ ng∆∞·ªùi d√πng")
    lang: str = Field(default="vi", description="Ng√¥n ng·ªØ tr·∫£ l·ªùi (vi ho·∫∑c en)")
    history: List[HistoryTurn] = Field(default=[], max_items=5, description="L·ªãch s·ª≠ h·ªôi tho·∫°i, t·ªëi ƒëa 5 l∆∞·ª£t")

class FeedbackRequest(BaseModel):
    question: str = Field(..., min_length=1, max_length=500, description="C√¢u h·ªèi li√™n quan ƒë·∫øn ph·∫£n h·ªìi")
    corrected_answer: str = Field(..., min_length=1, max_length=1000, description="C√¢u tr·∫£ l·ªùi s·ª≠a ƒë·ªïi t·ª´ ng∆∞·ªùi d√πng")
    lang: str = Field(default="vi", description="Ng√¥n ng·ªØ c·ªßa ph·∫£n h·ªìi (vi ho·∫∑c en)")



@router.post("/", response_model=dict)
async def submit_feedback(data: FeedbackRequest):
    """
    Nh·∫≠n v√† x√°c minh ph·∫£n h·ªìi t·ª´ ng∆∞·ªùi d√πng, ch·ªâ ch·∫•p nh·∫≠n ph·∫£n h·ªìi li√™n quan ƒë·∫øn giao th√¥ng/SurTraff.
    """
    try:
        # Ki·ªÉm tra ch·ªß ƒë·ªÅ c·ªßa ph·∫£n h·ªìi
        topic = detect_topic(data.question)
        if topic == "General" and not any(keyword in data.question.lower() for keyword in ["surtraff", "giao th√¥ng", "traffic"]):
            logger.warning(f"Off-topic feedback question: {data.question[:50]}...")
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail={
                    "error": "Ph·∫£n h·ªìi kh√¥ng li√™n quan ƒë·∫øn giao th√¥ng ho·∫∑c SurTraff.",
                    "suggestion": "H√£y cung c·∫•p ph·∫£n h·ªìi v·ªÅ SurTraff ho·∫∑c giao th√¥ng, v√≠ d·ª•: 'SurTraff ƒëo t·ªëc ƒë·ªô b·∫±ng radar v√† camera.'"
                }
            )

        # G·ªçi h√†m save_feedback ƒë·ªÉ l∆∞u ph·∫£n h·ªìi
        save_feedback(
            question=data.question,
            response=data.corrected_answer,
            lang=data.lang
        )

        # Ghi log ph·∫£n h·ªìi
        response = "Ph·∫£n h·ªìi c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ghi nh·∫≠n, c·∫£m ∆°n b·∫°n! üòä"
        logger.info(f"Feedback processed: Q={data.question[:30]}..., A={data.corrected_answer[:30]}..., Response={response[:30]}...")

        return {
            "response": response,
            "timestamp": datetime.now().isoformat()
        }

    except Exception as e:
        logger.error(f"Error processing feedback: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail={
                "error": "L·ªói khi x·ª≠ l√Ω ph·∫£n h·ªìi, vui l√≤ng th·ª≠ l·∫°i sau!",
                "suggestion": "H√£y cung c·∫•p ph·∫£n h·ªìi ƒë√∫ng v√† li√™n quan ƒë·∫øn giao th√¥ng/SurTraff!"
            }
        )
