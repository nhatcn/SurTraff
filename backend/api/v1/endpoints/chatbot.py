from fastapi import APIRouter, HTTPException
from pydantic import BaseModel, ValidationError
from typing import List
from datetime import datetime
import logging
from services.chatbot.process_question import process_question
logger = logging.getLogger(__name__)

router = APIRouter()

class HistoryTurn(BaseModel):
    sentence: str
    response: str = ""
    type: str = "general"
    lang: str = "vi"

class QueryRequest(BaseModel):
    sentence: str
    lang: str = "vi"
    history: List[HistoryTurn] = []

@router.post("/query")  # Chu·∫©n h√≥a URL, b·ªè d·∫•u "/" cu·ªëi
async def query_chatbot(request: QueryRequest):
    try:
        # Ghi log d·ªØ li·ªáu ƒë·∫ßu v√†o
        logger.info(f"Nh·∫≠n request: sentence={request.sentence}, lang={request.lang}, history={request.history}")
        
        # Ki·ªÉm tra th√™m ƒë·∫ßu v√†o
        if not request.sentence.strip():
            logger.warning("C√¢u h·ªèi r·ªóng")
            raise HTTPException(
                status_code=400,
                detail={
                    "error": "C√¢u h·ªèi kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng",
                    "suggestion": "H·ªèi v·ªÅ giao th√¥ng ho·∫∑c SurTraff nh√©! üòä" if request.lang == "vi" else "Ask about traffic or SurTraff! üòä"
                }
            )
        if request.lang not in ["vi", "en"]:
            logger.warning(f"Ng√¥n ng·ªØ kh√¥ng h·ª£p l·ªá: {request.lang}")
            raise HTTPException(
                status_code=400,
                detail={
                    "error": f"Ng√¥n ng·ªØ '{request.lang}' kh√¥ng h·ª£p l·ªá. S·ª≠ d·ª•ng 'vi' ho·∫∑c 'en'",
                    "suggestion": "H·ªèi v·ªÅ giao th√¥ng ho·∫∑c SurTraff nh√©! üòä" if request.lang == "vi" else "Ask about traffic or SurTraff! üòä"
                }
            )
        if len(request.history) > 5:
            logger.warning(f"L·ªãch s·ª≠ h·ªôi tho·∫°i qu√° d√†i: {len(request.history)} l∆∞·ª£t")
            raise HTTPException(
                status_code=400,
                detail={
                    "error": "L·ªãch s·ª≠ h·ªôi tho·∫°i v∆∞·ª£t qu√° 5 l∆∞·ª£t",
                    "suggestion": "X√≥a l·ªãch s·ª≠ v√† th·ª≠ l·∫°i nh√©! üòä" if request.lang == "vi" else "Clear history and try again! üòä"
                }
            )

        # G·ªçi h√†m x·ª≠ l√Ω c√¢u h·ªèi
        response = await process_question(
            question=request.sentence,
            history=[turn.dict() for turn in request.history],
            lang=request.lang
        )
        return response

    except ValidationError as ve:
        logger.error(f"L·ªói x√°c th·ª±c Pydantic: {str(ve)}", exc_info=True)
        raise HTTPException(
            status_code=422,
            detail={
                "error": f"D·ªØ li·ªáu ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá: {str(ve)}",
                "suggestion": "Ki·ªÉm tra c√¢u h·ªèi v√† l·ªãch s·ª≠ h·ªôi tho·∫°i nh√©! üòä" if request.lang == "vi" else "Check your question and chat history! üòä"
            }
        )
    except HTTPException as he:
        raise he
    except Exception as e:
        logger.error(f"L·ªói endpoint /api/query: {str(e)}", exc_info=True)
        raise HTTPException(
            status_code=500,
            detail={
                "error": f"L·ªói server: {str(e)}",
                "suggestion": "H·ªèi v·ªÅ giao th√¥ng ho·∫∑c SurTraff nh√©! üòä" if request.lang == "vi" else "Ask about traffic or SurTraff! üòä"
            }
        )
